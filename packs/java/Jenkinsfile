pipeline {
    environment {
        APP_NAME = 'REPLACE_ME_APP_NAME'
        VERSION = '1.0.0'
	DOCKER_REPO='REPLACE_ME_IMAGE_REPO'
	IMAGE_TAG='jenkins-test'
    }
    agent any
    stages {
        stage("Check Env") {
            when {
                not {
                    anyOf{
                        allOf {
                            environment name: 'DEPLOY_ENV', value: 'dev'
                            anyOf{
                                expression { BRANCH_NAME ==~ /^dev.*/ }
                                expression { BRANCH_NAME ==~ /^feature.*/ }
                                expression { BRANCH_NAME ==~ /^bugfix.*/ }

                            }
                        }
                        allOf {
                            environment name: 'DEPLOY_ENV', value: 'test'
                            expression { BRANCH_NAME ==~ /^test.*/ }
                        }
                        allOf {
                            environment name: 'DEPLOY_ENV', value: 'preview'
                            expression { BRANCH_NAME ==~ /^preview.*/ }
                        }
                        allOf {
                            environment name: 'DEPLOY_ENV', value: 'production'
                            anyOf{
                                expression { BRANCH_NAME == 'master' }
                                expression { BRANCH_NAME =~ /^release.*/ }
                            }
                        }
                    }
                }
            }
            steps {
                sh 'echo "env not matching"'
                sh 'exit 1'
            }
        }
        stage('Build') {
            agent {
                docker {
                    image 'maven:3.6.0-jdk-8-slim'
                    args '-v $HOME/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker'
                }
            }
            steps {
                sh 'mvn -B -DskipTests clean package'
                sh 'docker build --build-arg JAR_FILE=target/$APP_NAME-$VERSION.jar -t $DOCKER_REPO$APP_NAME:$IMAGE_TAG .'
            }
        }
        stage('Push Image') {
            steps {
                sh 'docker push $DOCKER_REPO$APP_NAME:$IMAGE_TAG'
            }
        }
        stage('Deploy') {
            steps {
	            sh 'helm lint charts/$APP_NAME'
                sh 'helm upgrade --debug --force --install --recreate-pods $APP_NAME charts/$APP_NAME'
            }
        }
    }
}