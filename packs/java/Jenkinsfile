pipeline {
    environment {
        APP_NAME = 'REPLACE_ME_APP_NAME'
	DOCKER_REPO='REPLACE_ME_IMAGE_REPO'
    }
    agent any
    stages {
        stage("Check Env") {
            steps {
		script {
                    global.checkEnv()
                }
	    }
        }
	stage("Gen Image Tag") {
            steps {
                script {
                    global.genImageTag()
                }
            }
        }
	stage('Test') {
            agent {
                docker {
                    image 'maven:3.6.0-jdk-8-slim'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'mvn versions:set -DnewVersion=$IMAGE_TAG'
                    sh 'mvn versions:commit'
                    sh 'mvn -B clean org.jacoco:jacoco-maven-plugin:prepare-agent test -Dmaven.test.failure.ignore=true'
                    sh 'mvn -B sonar:sonar'
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build') {
            agent {
                docker {
                    image 'maven:3.6.0-jdk-8-slim'
                    args '-v $HOME/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker'
                }
            }
            steps {
	        sh 'mvn versions:set -DnewVersion=$IMAGE_TAG'
		sh 'mvn versions:commit'
                sh 'mvn -B -DskipTests clean package'
                sh 'docker build --build-arg JAR_FILE=target/$APP_NAME-$IMAGE_TAG.jar -t $DOCKER_REPO$APP_NAME:$IMAGE_TAG .'
            }
        }
        stage('Push Image') {
            steps {
                sh 'docker push $DOCKER_REPO$APP_NAME:$IMAGE_TAG'
            }
        }
        stage('Deploy') {
            steps {
	        sh 'helm lint charts/$APP_NAME'
                sh 'helm upgrade --debug --install --set-string image.tag=$IMAGE_TAG,image.repository=$DOCKER_REPO,image.name=$APP_NAME $APP_NAME charts/$APP_NAME'
            }
        }
    }
}