pipeline {
    environment {
        APP_NAME = 'REPLACE_ME_APP_NAME'
	DOCKER_REPO='REPLACE_ME_IMAGE_REPO'
    }
    agent any
    stages {
        stage("Check Env") {
            steps {
		script {
                    global.checkEnv()
                }
	    }
        }
	stage("Gen Image Tag") {
            steps {
                script {
                    global.genImageTag()
                }
            }
        }
	stage('Test'){
            agent {
                docker {
                    image 'repository.xiaobao100.com/docker/library/dotnet-sonar-cn:4.6.2'
                }
            }
            steps{
              withSonarQubeEnv('sonarqube') {
                  sh "rm -rf .sonarqube"
                  sh "dotnet /sonar-scanner/SonarScanner.MSBuild.dll begin /k:$APP_NAME /d:sonar.cs.opencover.reportsPaths='**/coverage.opencover.xml'"
                  sh "dotnet build -c Release"
                  sh "rm -drf testResults"
                  sh (returnStatus: true, script: "find **/* -name \'*.csproj\' -print0 | xargs -L1 -0 -P 8 dotnet test --no-build -c Release --logger trx --results-directory testResults /p:CollectCoverage=true /p:CoverletOutputFormat=opencover")
                    step([$class: 'XUnitPublisher', testTimeMargin: '3000', thresholdMode: 1, thresholds: [[$class: 'FailedThreshold', unstableThreshold: '0']
                            , [$class: 'SkippedThreshold']], tools: [[$class: 'MSTestJunitHudsonTestType', deleteOutputFiles: true, failIfNotNew: false
                            , pattern: 'testResults/**/*.trx', skipNoTestFiles: true, stopProcessingIfError: true]]])
                  sh "dotnet /sonar-scanner/SonarScanner.MSBuild.dll end"
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build & Push Image') {
            steps {
                sh 'docker build -t $DOCKER_REPO$APP_NAME:$IMAGE_TAG .'
		sh 'docker push $DOCKER_REPO$APP_NAME:$IMAGE_TAG'
            }
        }
        stage('Deploy') {
            steps {
	        sh 'helm lint charts/$APP_NAME'
                sh 'helm upgrade --debug --install --set-string image.tag=$IMAGE_TAG,image.repository=$DOCKER_REPO,image.name=$APP_NAME $APP_NAME charts/$APP_NAME'
            }
        }
    }
}